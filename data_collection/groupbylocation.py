'''
This piece of code is used for downloading altitude data and organizing altitude data into the final_summary
table. Final summary table is generated by concating all the pollutant tables together.

[Update: 01/26/2016] I added teh code for finding states using googleAPI
'''
#For appending to the final_summary dataframe. Final summary dataframe is the name of all
#the pollutant appended to one another.
#Loops through each row

import pandas as pd
import urllib2
import numpy as np
import json
upper_lat = 50.0
lower_lat = 17.5
upper_lon = 310.0
lower_lon = 170.0
n_lat = 14
n_lon = 57

#declare empty dataframe
index_list = range(0,14*57)
df_altitude = pd.DataFrame(index = index_list, columns = ['lon','lat','alt','state','city'])
index=0

for lon in np.linspace(lower_lon,upper_lon,n_lon):
    for lat in np.linspace(lower_lat,upper_lat,n_lat):
        df_altitude.iloc[index,1] = lat
        if lon > 180:
            lon = lon-360 #return negative longitude, which is within domain
        url = 'https://maps.googleapis.com/maps/api/elevation/json?locations=' + str(lat)+','+str(lon)+'&key=AIzaSyC7FYiNCXNPvZ-ofF4zIcysX9P0N6Mkc04'
        df_altitude.iloc[index,0] = lon
        request = urllib2.Request(url)
        response = urllib2.urlopen(request)
        elevations = response.read()
        data = json.loads(elevations)
        el = []
        for result in data['results']:
            el.append(result[u'elevation'])
        #If there is no returned elevantion, then automatically set the elevantion to be zero
        if(len(el) != 0):
            df_altitude.iloc[index,2] = el[0]

        url2 = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + str(lat)+','+str(lon)+'&key=AIzaSyCml4C_BagzC6rwNBUwcUxdYRSz1xHafcM'
        request2 = urllib2.Request(url2)
        response2 = urllib2.urlopen(request2)
        geocode = response2.read()
        data_geocode = json.loads(geocode)
        if (len(data_geocode['results']) != 0):
            length = len(data_geocode['results'])
            if (str(data_geocode['results'][length-1]['address_components'][0]['short_name']) == 'US'):
                state = str(data_geocode ['results'][length-2]['address_components'][0]['short_name'])
                if (len(data_geocode ['results']) > 4):
                    city = str(data_geocode['results'][0]['formatted_address']).split(",")[1]
                    df_altitude.iloc[index,4] = city
                else:
                    city = "US"
                df_altitude.iloc[index,4] = city
                df_altitude.iloc[index,3] = state
                print "city: ", city, " state: ", state

        index+=1

df_altitude.to_csv("df_altitude.csv")
